#!/usr/bin/env bash

myname=$(basename "$0")

die()
{
  echo >&2 "!!! ERROR: $*"
  exit 1
}

prompt_usage()
{
  cat<<END
Usage:

  $myname --all|--only-derived-zimfiles

'$myname --all' creates/re-generates all ZIM files, including small.zim. Due
to some non-determinism in zimwriterfs the produced small.zim most likely will
vary on each invocation. Since the other (broken and embedded) ZIM files are
derived from small.zim they will vary too. This creates unnecessary pressure on
git. Therefore use the --all option only if the source data, or ZIM file
generation parameters change (or a serious bug is fixed in zimwriterfs).
Otherwise use the --only-derived-zimfiles option.
END
  exit 1
}

if [[ $# -ne 1 || ( "$1" != '--all' && "$1" != '--only-derived-zimfiles' ) ]]
then
  prompt_usage
fi

mode=$1

cd "$(dirname "$0")"

if [ "$mode" == '--all' ]
then
  rm -f small.zim
  zimwriterfs --withoutFTIndex \
              -w main.html \
              -f favicon.png \
              -l en \
              -t "Test ZIM file" \
              -d "N/A" \
              -c "N/A" \
              -p "N/A" \
              small_zimfile_data \
              small.zim \
  && echo 'small.zim was successfully created' \
  || die 'Failed to create small.zim'
fi

printf "BEGINZIM" > small.zim.embedded \
&& cat small.zim >> small.zim.embedded \
&& printf "ENDZIM" >> small.zim.embedded \
&& echo 'small.zim.embedded was successfully created' \
|| die 'Failed to create small.zim.embedded'

zimfilesize=$(wc -c < small.zim)

zimheader=$(./inspectzim --header small.zim|tail -n +2)

encode_integer_as_printf_fmt_string()
{
  local i n=$1 size=$2
  for (( i=0; i<size; ++i ))
  do
    printf '\\x%02x' $((n%256))
    let n=$((n/256))
  done
}

encode_uint64()
{
  encode_integer_as_printf_fmt_string "$1" 8
}

encode_uint32()
{
  encode_integer_as_printf_fmt_string "$1" 4
}

encode_uint16()
{
  encode_integer_as_printf_fmt_string "$1" 2
}

outofzimfile=$(encode_uint64 $((zimfilesize+10)))

get_header_field()
{
  sed -n "/^$1:/ {s/$1: *//;p;}" <<<"$zimheader"
}

overwrite_bytes_in_file()
{
  local fname=$1
  local bytes=$2
  local offset=$3
  local nbytes=$(printf "$bytes"|wc -c)
  printf "$bytes" |
    dd of="$fname" bs=1 seek=$offset count=$nbytes conv=notrunc &> /dev/null
}

break_zim_file()
{
  local zimfile_path=$1
  shift

  while [ $# -ne 0 ]
  do
    local bytes=$1 offset=$2
    shift 2
    overwrite_bytes_in_file "$zimfile_path" "$bytes" "$offset" \
      || return 1
  done
}

create_broken_zim_file()
{
  local broken_zimfile_name=$1
  shift

  cp small.zim "$broken_zimfile_name" \
  && break_zim_file "$broken_zimfile_name" "$@" \
  && echo "$broken_zimfile_name was successfully created" \
  || die "Failed to create $broken_zimfile_name"
}

broken_zimfile_name=invalid.smaller_than_header.zim
head -c40 small.zim > "$broken_zimfile_name" \
  && echo "$broken_zimfile_name was successfully created" \
  || die "Failed to create $broken_zimfile_name"

create_broken_zim_file invalid.outofbounds_urlptrpos.zim   \
                       "$outofzimfile" \
                       32

create_broken_zim_file invalid.outofbounds_titleptrpos.zim   \
                       "$outofzimfile" \
                       40

create_broken_zim_file invalid.outofbounds_clusterptrpos.zim   \
                       "$outofzimfile" \
                       48

create_broken_zim_file invalid.invalid_mimelistpos.zim   \
                       '\x00\x00\x00\x00\x00\x00\x00\x00'  \
                       56

create_broken_zim_file invalid.invalid_checksumpos.zim   \
                       '\x00\x00\x00\x00\x00\x00\x00\x00'  \
                       72

article_count=$(get_header_field article_count)
url_ptr_pos=$(get_header_field url_ptr_pos)
title_ptr_pos=$(get_header_field title_ptr_pos)
cluster_ptr_pos=$(get_header_field cluster_ptr_pos)
bad_article_index=$(encode_uint32 $((article_count)))

create_broken_zim_file invalid.outofbounds_first_direntptr.zim   \
                       "$outofzimfile" \
                       $((url_ptr_pos))

create_broken_zim_file invalid.outofbounds_last_direntptr.zim   \
                       "$outofzimfile" \
                       $((url_ptr_pos+8*(article_count-1)))

create_broken_zim_file invalid.outofbounds_first_title_entry.zim   \
                       "$bad_article_index" \
                       $((title_ptr_pos))

create_broken_zim_file invalid.outofbounds_last_title_entry.zim   \
                       "$bad_article_index" \
                       $((title_ptr_pos+4*(article_count-1)))

create_broken_zim_file invalid.outofbounds_first_clusterptr.zim   \
                       "$outofzimfile" \
                       $((cluster_ptr_pos))

dirent_ptrs=($(./inspectzim --dirent_ptr_table small.zim|tail -n +2))

dirent1_address=$(encode_uint64 $((dirent_ptrs[0])))
dirent2_address=$(encode_uint64 $((dirent_ptrs[1])))

create_broken_zim_file invalid.nonsorted_dirent_table.zim   \
                       "$dirent2_address" \
                       $((url_ptr_pos))   \
                       "$dirent1_address" \
                       $((url_ptr_pos+8))

title_index=($(./inspectzim --title_index small.zim|tail -n +2))

title1_dirent_index=$(encode_uint32 $((title_index[0])))
title2_dirent_index=$(encode_uint32 $((title_index[1])))

create_broken_zim_file invalid.nonsorted_title_index.zim   \
                       "$title2_dirent_index" \
                       $((title_ptr_pos))   \
                       "$title1_dirent_index" \
                       $((title_ptr_pos+4))

bad_mimetype_list=$(printf '%-944s' 'This is a bad mimetype value filling all the space between the header and the first cluster without any null character')
create_broken_zim_file invalid.bad_mimetype_list.zim   \
                       "$bad_mimetype_list" \
                       80

create_broken_zim_file invalid.bad_mimetype_in_dirent.zim   \
                       $(encode_uint16 1234) \
                       $((dirent_ptrs[article_count/2]))
